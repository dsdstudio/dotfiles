
* My Emacs Configuration File 
  
** Emacs Package 관련 설정  
   #+BEGIN_SRC elisp
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
     (package-initialize)

     (setq dsdstudio/packages
       '(org
         org-plus-contrib
         clojure-mode
         cider
         magit
         doom-themes
         powerline
         auto-complete
         company
         emmet-mode
         treemacs
         helm
         helm-projectile
         helm-ls-git
         helm-ag
         ac-js2
         js2-mode
         web-mode
         gradle-mode
         flycheck
         ob-go
         ob-kotlin
         ob-swift
         fzf
         swift-mode
         multiple-cursors
         multi-term
         markdown-mode
         exec-path-from-shell
         minimap))

     (dolist (pkg dsdstudio/packages)
       (when (not (package-installed-p pkg))
     (package-install pkg)))
#+END_SRC

   
** 기본 정보

#+BEGIN_SRC elisp
(setq user-full-name "Bohyung Kim"
      user-mail-address "bohyungkim@me.com")
#+END_SRC

** 핫키 설정

#+BEGIN_SRC elisp
(global-company-mode)
(require 'multiple-cursors)

(global-set-key (kbd "M-TAB") #'company-complete)

;; 명령 모드일때 helm 자동완성의 지원을 받을수 있도록
(global-set-key (kbd "M-x") 'helm-M-x)

;; git repository에서 fuzzy search 되도록 
(global-set-key (kbd "C-x f") 'fzf-git)
;; 버퍼 찾기시 helm의 buffer 찾기를 사용하도록
(global-set-key (kbd "C-x b") 'helm-buffers-list)

;; multiple 커서 단축키 등록
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

** Theme

#+BEGIN_SRC elisp
  (require 'powerline)

  (powerline-default-theme)
#+END_SRC

doom-one theme는 이맥스 뜨자마자 바로 로드하도록 설정함
#+BEGIN_SRC elisp
(add-hook 'after-init-hook
          (lambda () (load-theme 'doom-one t) (global-linum-mode 1)))
#+END_SRC

** Configs 

emacs 에서 외부프로그램을 연동해서 사용하는 경우 현재 나의 쉘 기본 설정을 읽어가도록 세팅
예) fzf, the silver sercher(ag)
#+BEGIN_SRC elisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
(put 'upcase-region 'disabled nil)
#+END_SRC

*** 에디터 설정

tab 사이즈
#+BEGIN_SRC elisp
;; tab size space 4
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
#+END_SRC

** 백업 파일 경로

편집시 백업파일 (filename.org~)이 다른 경로에 저장되도록 변경하는 설정
.emacs.d/autosaves/[].ext

#+BEGIN_SRC elisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/"))

(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

#+END_SRC

* 모듈 연관 설정

** Helm

helm-ag (the silver searcher) 연동 설정

#+BEGIN_SRC elisp
(setq helm-ff-transformer-show-only-basename nil
            helm-ls-git-show-abs-or-relative 'relative)
(setq helm-ag-base-command "/usr/local/bin/ag --nocolor --nogroup --ignore-case")
#+END_SRC

** Cider 

#+BEGIN_SRC elisp
(add-hook 'cider-repl-mode-hook #'company-mode)
(add-hook 'cider-mode-hook #'company-mode)
#+END_SRC

** Org 

#+BEGIN_SRC elisp
  (require 'org)
  (setq org-log-done t)
  ;; org-babel 설정
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (kotlin . t)
     (C . t)
     (swift . t)
     (clojure . t)
     (shell . t)))

  (setq org-todo-keywords
        '((sequence "할일" "진행중" "완료")))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)

  (defun auto-confirm-babel-eval (lang body)
    nil)

  (setq org-confirm-babel-evaluate 'auto-confirm-babel-eval)
#+END_SRC

** WebMode 

#+BEGIN_SRC elisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))

(setq web-mode-markup-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-extra-snippets
      '(("erb" . (("errender" . "<%= | %>")))))

;; emmet-mode 설정. webmode가 켜지면 emmet-mode도 같이 적용되도록 ..
(require 'emmet-mode)
(add-hook 'web-mode-hook 'emmet-mode)
(setq web-mode-style-padding 0)
(setq web-mode-script-padding 0)
#+END_SRC

** flycheck 

파일 열때 기본적으로 flycheck 활성화 처리

#+BEGIN_SRC elisp
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC


eslint executable path는 local 을 우선시하도록 처리

#+BEGIN_SRC elisp
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

** vue-mode 

script 섹션의 js-indent가 기본 4인데 2로 조정함

#+BEGIN_SRC elisp
(setq indent-tabs-mode nil
      js-indent-level 2)
(setq css-indent-offset 2)
#+END_SRC

#+PROPERTY:    header-args:elisp  :tangle ~/.emacs.d/init-main.el
#+PROPERTY:    header-args:emacs-lisp  :tangle ~/.emacs.d/init-main.el
#+PROPERTY:    header-args        :results silent   :eval no-export   :comments org

